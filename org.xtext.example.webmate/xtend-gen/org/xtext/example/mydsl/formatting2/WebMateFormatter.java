/**
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.WebMateGrammarAccess;
import webmate.Abbreviation;
import webmate.Attribute;
import webmate.Group;
import webmate.HTML;
import webmate.ID;
import webmate.Symbol;
import webmate.Tag;

@SuppressWarnings("all")
public class WebMateFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private WebMateGrammarAccess _webMateGrammarAccess;

  protected void _format(final HTML hTML, @Extension final IFormattableDocument document) {
    EList<Abbreviation> _abbreviation = hTML.getAbbreviation();
    for (final Abbreviation abbreviation : _abbreviation) {
      document.<Abbreviation>format(abbreviation);
    }
  }

  protected void _format(final Abbreviation abbreviation, @Extension final IFormattableDocument document) {
    document.<Tag>format(abbreviation.getTags());
    document.<webmate.Class>format(abbreviation.getClasses());
    document.<ID>format(abbreviation.getIds());
    document.<Symbol>format(abbreviation.getSymbols());
    document.<Attribute>format(abbreviation.getAttributes());
    document.<Group>format(abbreviation.getGroup());
  }

  public void format(final Object abbreviation, final IFormattableDocument document) {
    if (abbreviation instanceof XtextResource) {
      _format((XtextResource)abbreviation, document);
      return;
    } else if (abbreviation instanceof Abbreviation) {
      _format((Abbreviation)abbreviation, document);
      return;
    } else if (abbreviation instanceof HTML) {
      _format((HTML)abbreviation, document);
      return;
    } else if (abbreviation instanceof EObject) {
      _format((EObject)abbreviation, document);
      return;
    } else if (abbreviation == null) {
      _format((Void)null, document);
      return;
    } else if (abbreviation != null) {
      _format(abbreviation, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(abbreviation, document).toString());
    }
  }
}
