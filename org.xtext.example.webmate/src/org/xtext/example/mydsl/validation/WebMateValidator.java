/*
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydsl1.validation;

import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;

import webmate.Attribute;
import webmate.HTML;
import webmate.HTMLTag;
import webmate.Tag;
import webmate.WebmatePackage;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class WebMateValidator extends AbstractWebMateValidator {
	
	public static final String REQUIRED_ABBRIVIATION = "You shoudld have atleast one abbrivation to get start";
	public static final String A_TAG_ERROR = "You shoudld have atleast one attribute";
	public static final String A_TAG_HREF_ERROR = "Attribute href is missing inside a";
	public static final String INPUT_TAG_NAME_ERROR = "Attribute name is missinig inside input";
	public static final String IMG_TAG_SRC_ERROR = "Attribute  src is missinig inside img";
	public static final String IMG_TAG_HEIGHT_ERROR = "Attribute  height value should be > 0";
	public static final String IMG_TAG_WIDTH_ERROR = "Attribute  width value should be > 0";
	public static final String SELECT_TAG_NAME_ERROR = "Attribute name is missinig inside select";
	public static final String ATTRIBUTE_ERROR = "Enter correct attribute name";
	
	@Check
	public void checkAbbreviationIsPresent(HTML abb) {
		if (abb.getAbbreviation().size() == 0) {
			error(REQUIRED_ABBRIVIATION, WebmatePackage.Literals.HTML__ABBREVIATION);
		}
		if (abb.getAbbreviation().get(0).getTags().size() == 0) {
			error("You should have atleast one tag", WebmatePackage.Literals.HTML__ABBREVIATION);
		}
	}

	@Check
	public void checkTag(Tag tags) {
		if(tags.getTagName() == HTMLTag.A) {
			EList<Attribute> attributeList = tags.getAttribute();
			if(attributeList.size()==0)
			{
				error(A_TAG_HREF_ERROR, WebmatePackage.Literals.TAG__TAG_NAME);
			}
			else {
			for(Attribute a: attributeList) {
				if(!a.getAttributeName().equals("href")) {
					error(A_TAG_HREF_ERROR, WebmatePackage.Literals.TAG__TAG_NAME);
					}
				}
			}
		}
		if(tags.getTagName() == HTMLTag.INPUT) {
			EList<Attribute> attributeList = tags.getAttribute();
			for(Attribute a: attributeList) {
				if(!a.getAttributeName().equals("name")) {
					error(INPUT_TAG_NAME_ERROR, WebmatePackage.Literals.TAG__TAG_NAME);
					}
				}
			}
		if(tags.getTagName() == HTMLTag.IMG) {
			EList<Attribute> attributeList = tags.getAttribute();
			for(Attribute a: attributeList) {
				if(!a.getAttributeName().equals("src")) {
					error(IMG_TAG_SRC_ERROR, WebmatePackage.Literals.TAG__TAG_NAME);
				}
				if(a.getAttributeName().equals("height")) {
					if(Integer.parseInt(a.getAttributeValue()) <= 0) {
						error(IMG_TAG_HEIGHT_ERROR, WebmatePackage.Literals.TAG__TAG_NAME);
					}
				}
				if(a.getAttributeName().equals("width")) {
					if(Integer.parseInt(a.getAttributeValue()) <= 0) {
						error(IMG_TAG_WIDTH_ERROR, WebmatePackage.Literals.TAG__TAG_NAME);
						}
					}
				}
			}
		if(tags.getTagName() == HTMLTag.SELECT) {
			EList<Attribute> attributeList = tags.getAttribute();
			for(Attribute a: attributeList) {
				if(!a.getAttributeName().equals("name")) {
					error(SELECT_TAG_NAME_ERROR, WebmatePackage.Literals.TAG__TAG_NAME);
					}
				}
			}
		}
	
	@Check
	public void checkAttribute(Attribute attribute) {
		if(attribute.getAttributeName().length() < 3) {
			error(ATTRIBUTE_ERROR, WebmatePackage.Literals.ATTRIBUTE__ATTRIBUTE_NAME);
			}
		}
	
}
