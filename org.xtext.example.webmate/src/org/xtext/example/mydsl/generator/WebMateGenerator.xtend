/*
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydsl1.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import webmate.Tag
import org.eclipse.xtext.EcoreUtil2
import webmate.Abbreviation
import java.util.Stack
import webmate.Symbol

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WebMateGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var content = ""
		for (element: EcoreUtil2.getAllContentsOfType(resource.contents.head, Abbreviation))
		{
			content += toHTMLCode(element)
			//toHTMLCode(element, fsa)
		}
		fsa.generateFile("index.html",content)
	}
	def toHTMLCode(Abbreviation element)
	{
		var tag = element.tags.head
		
		val build = new StringBuilder()
		
		var flag = 0;
		
		
		if (!element.tags.isEmpty) {
			var s = toHTMLTag(element, tag)
			build.append(s)
			tag = element.tags.head
			System.out.println("Check me............"+element.symbols.toArray.toString)
			
			
			for (sym : element.symbols)
			{
				
			if (!element.symbols.empty){
				var in_sym = sym
					System.out.println("HELLO"+ in_sym.sym)
					switch sym.sym {
						
						case GREATER: {
							System.out.println("Check me A............"+element.symbols)
							var inn_tag = sym	
							System.out.println("Check me B............")
							build.append("\t")
							var s1 = toHTMLTag(element, inn_tag.tag)
							build.append(s1)
							build.append("\t</"+inn_tag.tag.tagName+">") 
							if (element.symbols.toArray.toString.contains("MULTIPLY"))
							{
								if (element.symbols.get(element.symbols.indexOf('>')+2).sym.toString.equals("MULTIPLY")) {
								System.out.println("B")
								for(var i=0; i<element.symbols.get(element.symbols.indexOf('>')+2).count-1; i++) {
									System.out.println("Check me A2............")
									var s2 = toHTMLTag(element, inn_tag.tag)
									build.append("\n\t"+s2)
									build.append("</"+inn_tag.tag.tagName+">") 
									System.out.println("Check me A3............")
								}
								}
							}
							
						}
						
						case MULTIPLY: { 
							System.out.println("Check me 1 ............"+in_sym.count)
							if (!(element.symbols.head.count == 0)){
								System.out.println("Check me 1 ............")
								build.append("</"+tag.tagName+">\n" )
								for(var i=0; i<element.symbols.head.count-1; i++) {
									System.out.println("Check me 2............")
									flag = 1
									var s1 = toHTMLTag(element, tag)
									build.append(s1)
									build.append("</"+tag.tagName+">") 
									build.append("\n")
									System.out.println("Check me 3............")
								}
							}
						}
						case PLUS: {
							if (flag == 0)
							{
								System.out.println("HEre is the problem")
								tag = element.tags.head
								build.append("</"+tag.tagName+">")
							}
							var temp_tag = sym
//								for (inn_tag : element.symbols) { 			
									System.out.println("Check me B............")
									build.append("\n")
									var s1 = toHTMLTag(element, temp_tag.tag)
									build.append(s1)
									build.append("\n</"+temp_tag.tag.tagName+">")
//								}
								flag = 1;
						}
					}
				}
			}
			
			if (flag == 0 )
			{
				tag = element.tags.head
				build.append("\n</"+tag.tagName+">")
			}
			flag = 0 ; 
			
		}	
		
		
		if (!element.ids.isEmpty) { 
			build.append(" id= " +element.ids.head.idName)
		}
		build.toString()
	}
	def toHTMLTag(Abbreviation element, Tag tag) { 
		
		if (tag.tagName !== null)
		{
			val build = new StringBuilder()
			build.append("<")
			build.append(tag.tagName)
			if (tag.id !== null)
			{
				build.append(" id=" +tag.id.idName)
			}
			
			if (!tag.class_.isEmpty || !element.classes.isEmpty) { 
				build.append(" class=" +tag.class_.map[class | class.className].join(" "))
				build.append(" "+element.classes.map[class | class.className].join(" "))
			}
			
			for(attribute : element.attributes) {
				build.append(" "+attribute.attributeName+"="+attribute.attributeValue)
			}
			
			for(att : tag.attribute){ 
				build.append(" "+att.attributeName+"="+att.attributeValue)
			}
			
			if (tag.inputString !== null) {
				build.append(">") 
				build.append(tag.inputString)
			} else {
				build.append("> \n") 
			}
			
			build.toString()
		}
	}
}