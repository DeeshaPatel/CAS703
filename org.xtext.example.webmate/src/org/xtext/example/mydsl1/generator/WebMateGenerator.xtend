/*
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydsl1.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import webmate.Tag
import org.eclipse.xtext.EcoreUtil2
import webmate.Abbreviation
import java.util.Stack

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WebMateGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var content = ""
		for (element: EcoreUtil2.getAllContentsOfType(resource.contents.head, Abbreviation))
		{
			content += toHTMLCode(element)
			//toHTMLCode(element, fsa)
		}
		fsa.generateFile("index.html",content)
	}
	def toHTMLCode(Abbreviation element)
	{
		var tag = element.tags.head
		
		val build = new StringBuilder()
		
		val stack = new Stack()
		
		
		if (!element.tags.isEmpty) {
			build.append("<")
			var s = toHTMLTag(element, tag)
			build.append(s)
			build.append(">") 
			if (!element.symbols.empty && !element.symbols.equals('>')){
				for (inn_tag : element.symbols) { 
					build.append("<")
					var s1 = toHTMLTag(element, inn_tag.tag)
					build.append(s1)
					build.append(">")
					stack.push(inn_tag.tag.tagName)
				}
				for (var i = stack.size-1; i>=0;i--) {
					build.append("</"+stack.pop+">")
				}
			}
			build.append("</"+tag.tagName+">")
		}	
		
		if (!element.symbols.empty && !element.symbols.equals('*')){
			for(var i=0; i<element.symbols.head.count-1; i++) {
				build.append(System.getProperty("line.separator"))
				build.append("<") 
				var s = toHTMLTag(element, tag)
				build.append(s)
				build.append(">")
				build.append("</"+tag.tagName+">")
			}
		}
		
		
		if (!element.ids.isEmpty) { 
			build.append(" id= " +element.ids.head.idName)
		}
		build.toString()
	}
	def toHTMLTag(Abbreviation element, Tag tag) { 
		
		if (tag.tagName !== null)
		{
			val build = new StringBuilder()
			build.append(tag.tagName)
			if (tag.id !== null)
			{
				build.append(" id=" +tag.id.idName)
			}
			
			if (!tag.class_.isEmpty || !element.classes.isEmpty) { 
				build.append(" class=" +tag.class_.map[class | class.className].join(" "))
				build.append(" "+element.classes.map[class | class.className].join(" "))
			}
			
			for(attribute : element.attributes) {
				build.append(" "+attribute.attributeName+"="+attribute.attributeValue)
			}
			
			for(att : tag.attribute){ 
				build.append(" "+att.attributeName+"="+att.attributeValue)
			}
			
			build.toString()
		}
	}
	def toHTMLCode(Resource r)
	{
		var html = ""
		for (element: r.contents)
		{
			if (element instanceof Tag)
			{
				html += "<" + element.tagName + ">" 
			}
		}
		html
	}
}
