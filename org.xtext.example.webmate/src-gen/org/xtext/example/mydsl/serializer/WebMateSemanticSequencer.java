/*
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.WebMateGrammarAccess;
import webmate.Abbreviation;
import webmate.Attribute;
import webmate.Group;
import webmate.HTML;
import webmate.ID;
import webmate.Symbol;
import webmate.Tag;
import webmate.WebmatePackage;

@SuppressWarnings("all")
public class WebMateSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WebMateGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WebmatePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WebmatePackage.ABBREVIATION:
				sequence_Abbreviation(context, (Abbreviation) semanticObject); 
				return; 
			case WebmatePackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case WebmatePackage.CLASS:
				sequence_Class(context, (webmate.Class) semanticObject); 
				return; 
			case WebmatePackage.GROUP:
				sequence_Group(context, (Group) semanticObject); 
				return; 
			case WebmatePackage.HTML:
				sequence_HTML(context, (HTML) semanticObject); 
				return; 
			case WebmatePackage.ID:
				sequence_ID0(context, (ID) semanticObject); 
				return; 
			case WebmatePackage.SYMBOL:
				sequence_Symbol(context, (Symbol) semanticObject); 
				return; 
			case WebmatePackage.TAG:
				sequence_Tag(context, (Tag) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Abbreviation returns Abbreviation
	 *
	 * Constraint:
	 *     (
	 *         abbreviation+=[Abbreviation|EString]+ | 
	 *         (
	 *             tags+=Tag+ 
	 *             ids+=ID0* 
	 *             symbols+=Symbol* 
	 *             classes+=Class* 
	 *             attributes+=Attribute* 
	 *             group+=Group*
	 *         )
	 *     )?
	 * </pre>
	 */
	protected void sequence_Abbreviation(ISerializationContext context, Abbreviation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (attributeName=EString attributeValue=EString?)
	 * </pre>
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Class returns Class
	 *
	 * Constraint:
	 *     className=EString
	 * </pre>
	 */
	protected void sequence_Class(ISerializationContext context, webmate.Class semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WebmatePackage.Literals.CLASS__CLASS_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebmatePackage.Literals.CLASS__CLASS_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClassAccess().getClassNameEStringParserRuleCall_2_0(), semanticObject.getClassName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Group returns Group
	 *
	 * Constraint:
	 *     abbreviation+=Abbreviation+
	 * </pre>
	 */
	protected void sequence_Group(ISerializationContext context, Group semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HTML returns HTML
	 *
	 * Constraint:
	 *     abbreviation+=Abbreviation+
	 * </pre>
	 */
	protected void sequence_HTML(ISerializationContext context, HTML semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ID0 returns ID
	 *
	 * Constraint:
	 *     idName=EString
	 * </pre>
	 */
	protected void sequence_ID0(ISerializationContext context, ID semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WebmatePackage.Literals.ID__ID_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebmatePackage.Literals.ID__ID_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getID0Access().getIdNameEStringParserRuleCall_1_1_0(), semanticObject.getIdName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Symbol returns Symbol
	 *
	 * Constraint:
	 *     (count=EInt | tag=Tag | tag=Tag | tag=Tag | sym=ValidSymbol)
	 * </pre>
	 */
	protected void sequence_Symbol(ISerializationContext context, Symbol semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Tag returns Tag
	 *
	 * Constraint:
	 *     (tagName=HTMLTag class+=Class* id=ID0? attribute+=Attribute*)
	 * </pre>
	 */
	protected void sequence_Tag(ISerializationContext context, Tag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
