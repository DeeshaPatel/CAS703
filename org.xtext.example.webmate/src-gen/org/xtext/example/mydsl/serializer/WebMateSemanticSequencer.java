/*
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsl.services.WebMateGrammarAccess;
import webmate.Abbreviation;
import webmate.Attribute;
import webmate.Element;
import webmate.Emmet;
import webmate.ID;
import webmate.Prefix;
import webmate.Suffix;
import webmate.Tag;
import webmate.WebmatePackage;

@SuppressWarnings("all")
public class WebMateSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WebMateGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WebmatePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WebmatePackage.ABBREVIATION:
				sequence_Abbreviation(context, (Abbreviation) semanticObject); 
				return; 
			case WebmatePackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case WebmatePackage.CLASS:
				sequence_Class(context, (webmate.Class) semanticObject); 
				return; 
			case WebmatePackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case WebmatePackage.EMMET:
				sequence_Emmet(context, (Emmet) semanticObject); 
				return; 
			case WebmatePackage.ID:
				sequence_ID0(context, (ID) semanticObject); 
				return; 
			case WebmatePackage.PREFIX:
				sequence_Prefix(context, (Prefix) semanticObject); 
				return; 
			case WebmatePackage.SUFFIX:
				sequence_Suffix(context, (Suffix) semanticObject); 
				return; 
			case WebmatePackage.TAG:
				sequence_Tag(context, (Tag) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Abbreviation returns Abbreviation
	 *
	 * Constraint:
	 *     (prefix=Prefix? (element+=Element element+=Element*)? suffix=Suffix?)
	 * </pre>
	 */
	protected void sequence_Abbreviation(ISerializationContext context, Abbreviation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (attributeName=EString? attributeValue=EString?)
	 * </pre>
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Class returns Class
	 *
	 * Constraint:
	 *     className=EString?
	 * </pre>
	 */
	protected void sequence_Class(ISerializationContext context, webmate.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (count=EInt? elementName=Tag? elementClass=Class? elementID=ID0? (attributes+=Attribute attributes+=Attribute*)?)
	 * </pre>
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Emmet returns Emmet
	 *
	 * Constraint:
	 *     (abbreviation+=Abbreviation abbreviation+=Abbreviation*)
	 * </pre>
	 */
	protected void sequence_Emmet(ISerializationContext context, Emmet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ID0 returns ID
	 *
	 * Constraint:
	 *     idName=EString?
	 * </pre>
	 */
	protected void sequence_ID0(ISerializationContext context, ID semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Prefix returns Prefix
	 *
	 * Constraint:
	 *     (count=EInt? elementName=Tag? elementClass=Class? elementID=ID0?)
	 * </pre>
	 */
	protected void sequence_Prefix(ISerializationContext context, Prefix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Suffix returns Suffix
	 *
	 * Constraint:
	 *     (text=EString? elementName=Tag? elementClass=Class? elementID=ID0?)
	 * </pre>
	 */
	protected void sequence_Suffix(ISerializationContext context, Suffix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Tag returns Tag
	 *
	 * Constraint:
	 *     tagName=EString?
	 * </pre>
	 */
	protected void sequence_Tag(ISerializationContext context, Tag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
