/*
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydsl1.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WebMateGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class HTMLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.WebMate.HTML");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHTMLAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAbbreviationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAbbreviationAbbreviationParserRuleCall_1_0 = (RuleCall)cAbbreviationAssignment_1.eContents().get(0);
		
		//HTML returns HTML:
		//    {HTML}
		//    (abbreviation+=Abbreviation)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{HTML}
		//(abbreviation+=Abbreviation)+
		public Group getGroup() { return cGroup; }
		
		//{HTML}
		public Action getHTMLAction_0() { return cHTMLAction_0; }
		
		//(abbreviation+=Abbreviation)+
		public Assignment getAbbreviationAssignment_1() { return cAbbreviationAssignment_1; }
		
		//Abbreviation
		public RuleCall getAbbreviationAbbreviationParserRuleCall_1_0() { return cAbbreviationAbbreviationParserRuleCall_1_0; }
	}
	public class AbbreviationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.WebMate.Abbreviation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbbreviationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAbbreviationAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cAbbreviationAbbreviationCrossReference_2_0_0 = (CrossReference)cAbbreviationAssignment_2_0.eContents().get(0);
		private final RuleCall cAbbreviationAbbreviationEStringParserRuleCall_2_0_0_1 = (RuleCall)cAbbreviationAbbreviationCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cTagsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_2_1_0_0 = (RuleCall)cTagsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cIdsAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cIdsID0ParserRuleCall_2_1_1_0_0 = (RuleCall)cIdsAssignment_2_1_1_0.eContents().get(0);
		private final Assignment cSymbolsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cSymbolsSymbolParserRuleCall_2_1_1_1_0 = (RuleCall)cSymbolsAssignment_2_1_1_1.eContents().get(0);
		private final Assignment cClassesAssignment_2_1_1_2 = (Assignment)cGroup_2_1_1.eContents().get(2);
		private final RuleCall cClassesClassParserRuleCall_2_1_1_2_0 = (RuleCall)cClassesAssignment_2_1_1_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1_1_3 = (Assignment)cGroup_2_1_1.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_2_1_1_3_0 = (RuleCall)cAttributesAssignment_2_1_1_3.eContents().get(0);
		private final Assignment cGroupAssignment_2_1_1_4 = (Assignment)cGroup_2_1_1.eContents().get(4);
		private final RuleCall cGroupGroupParserRuleCall_2_1_1_4_0 = (RuleCall)cGroupAssignment_2_1_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Abbreviation returns Abbreviation:
		//    {Abbreviation}
		//    '{'
		//    ((abbreviation+=[Abbreviation|EString])* | (tags+=Tag)+
		//    ((ids+=ID0)*
		//    (symbols+=Symbol)*
		//    (classes+=Class)*
		//    (attributes+=Attribute)*
		//    (group+=Group)* ))
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Abbreviation}
		//'{'
		//((abbreviation+=[Abbreviation|EString])* | (tags+=Tag)+
		//((ids+=ID0)*
		//(symbols+=Symbol)*
		//(classes+=Class)*
		//(attributes+=Attribute)*
		//(group+=Group)* ))
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Abbreviation}
		public Action getAbbreviationAction_0() { return cAbbreviationAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//((abbreviation+=[Abbreviation|EString])* | (tags+=Tag)+
		//((ids+=ID0)*
		//(symbols+=Symbol)*
		//(classes+=Class)*
		//(attributes+=Attribute)*
		//(group+=Group)* ))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(abbreviation+=[Abbreviation|EString])*
		public Assignment getAbbreviationAssignment_2_0() { return cAbbreviationAssignment_2_0; }
		
		//[Abbreviation|EString]
		public CrossReference getAbbreviationAbbreviationCrossReference_2_0_0() { return cAbbreviationAbbreviationCrossReference_2_0_0; }
		
		//EString
		public RuleCall getAbbreviationAbbreviationEStringParserRuleCall_2_0_0_1() { return cAbbreviationAbbreviationEStringParserRuleCall_2_0_0_1; }
		
		//(tags+=Tag)+
		//   ((ids+=ID0)*
		//   (symbols+=Symbol)*
		//   (classes+=Class)*
		//   (attributes+=Attribute)*
		//   (group+=Group)* )
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//(tags+=Tag)+
		public Assignment getTagsAssignment_2_1_0() { return cTagsAssignment_2_1_0; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_2_1_0_0() { return cTagsTagParserRuleCall_2_1_0_0; }
		
		//((ids+=ID0)*
		//(symbols+=Symbol)*
		//(classes+=Class)*
		//(attributes+=Attribute)*
		//(group+=Group)* )
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//(ids+=ID0)*
		public Assignment getIdsAssignment_2_1_1_0() { return cIdsAssignment_2_1_1_0; }
		
		//ID0
		public RuleCall getIdsID0ParserRuleCall_2_1_1_0_0() { return cIdsID0ParserRuleCall_2_1_1_0_0; }
		
		//(symbols+=Symbol)*
		public Assignment getSymbolsAssignment_2_1_1_1() { return cSymbolsAssignment_2_1_1_1; }
		
		//Symbol
		public RuleCall getSymbolsSymbolParserRuleCall_2_1_1_1_0() { return cSymbolsSymbolParserRuleCall_2_1_1_1_0; }
		
		//(classes+=Class)*
		public Assignment getClassesAssignment_2_1_1_2() { return cClassesAssignment_2_1_1_2; }
		
		//Class
		public RuleCall getClassesClassParserRuleCall_2_1_1_2_0() { return cClassesClassParserRuleCall_2_1_1_2_0; }
		
		//(attributes+=Attribute)*
		public Assignment getAttributesAssignment_2_1_1_3() { return cAttributesAssignment_2_1_1_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_1_1_3_0() { return cAttributesAttributeParserRuleCall_2_1_1_3_0; }
		
		//(group+=Group)*
		public Assignment getGroupAssignment_2_1_1_4() { return cGroupAssignment_2_1_1_4; }
		
		//Group
		public RuleCall getGroupGroupParserRuleCall_2_1_1_4_0() { return cGroupGroupParserRuleCall_2_1_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ID0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.WebMate.ID0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIDAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdNameEStringParserRuleCall_1_1_0 = (RuleCall)cIdNameAssignment_1_1.eContents().get(0);
		
		//ID0 returns ID:
		//    {ID}
		//    ('#' idName=EString) ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ID}
		//('#' idName=EString)
		public Group getGroup() { return cGroup; }
		
		//{ID}
		public Action getIDAction_0() { return cIDAction_0; }
		
		//('#' idName=EString)
		public Group getGroup_1() { return cGroup_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }
		
		//idName=EString
		public Assignment getIdNameAssignment_1_1() { return cIdNameAssignment_1_1; }
		
		//EString
		public RuleCall getIdNameEStringParserRuleCall_1_1_0() { return cIdNameEStringParserRuleCall_1_1_0; }
	}
	public class SymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.WebMate.Symbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSymbolAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cSymAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cSymSYMEnumRuleCall_0_1_0_0 = (RuleCall)cSymAssignment_0_1_0.eContents().get(0);
		private final Assignment cCountAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cCountEIntParserRuleCall_0_1_1_0 = (RuleCall)cCountAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSymAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSymSYMEnumRuleCall_1_0_0 = (RuleCall)cSymAssignment_1_0.eContents().get(0);
		private final Assignment cTagAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTagTagParserRuleCall_1_1_0 = (RuleCall)cTagAssignment_1_1.eContents().get(0);
		
		//Symbol returns Symbol:
		//    {Symbol}
		//    (sym=SYM count=EInt) | (sym=SYM tag=Tag);
		@Override public ParserRule getRule() { return rule; }
		
		//{Symbol}
		//(sym=SYM count=EInt) | (sym=SYM tag=Tag)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Symbol}
		//(sym=SYM count=EInt)
		public Group getGroup_0() { return cGroup_0; }
		
		//{Symbol}
		public Action getSymbolAction_0_0() { return cSymbolAction_0_0; }
		
		//(sym=SYM count=EInt)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//sym=SYM
		public Assignment getSymAssignment_0_1_0() { return cSymAssignment_0_1_0; }
		
		//SYM
		public RuleCall getSymSYMEnumRuleCall_0_1_0_0() { return cSymSYMEnumRuleCall_0_1_0_0; }
		
		//count=EInt
		public Assignment getCountAssignment_0_1_1() { return cCountAssignment_0_1_1; }
		
		//EInt
		public RuleCall getCountEIntParserRuleCall_0_1_1_0() { return cCountEIntParserRuleCall_0_1_1_0; }
		
		//(sym=SYM tag=Tag)
		public Group getGroup_1() { return cGroup_1; }
		
		//sym=SYM
		public Assignment getSymAssignment_1_0() { return cSymAssignment_1_0; }
		
		//SYM
		public RuleCall getSymSYMEnumRuleCall_1_0_0() { return cSymSYMEnumRuleCall_1_0_0; }
		
		//tag=Tag
		public Assignment getTagAssignment_1_1() { return cTagAssignment_1_1; }
		
		//Tag
		public RuleCall getTagTagParserRuleCall_1_1_0() { return cTagTagParserRuleCall_1_1_0; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.WebMate.Tag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTagAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTagNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagNameHTMLTagEnumRuleCall_1_0 = (RuleCall)cTagNameAssignment_1.eContents().get(0);
		private final Assignment cClassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassClassParserRuleCall_2_0 = (RuleCall)cClassAssignment_2.eContents().get(0);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdID0ParserRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cAttributeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributeAttributeParserRuleCall_4_0 = (RuleCall)cAttributeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInputStringAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInputStringEStringParserRuleCall_5_1_0 = (RuleCall)cInputStringAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Tag returns Tag:
		//    {Tag}
		//     tagName=HTMLTag (class+=Class)* id=ID0? attribute+=Attribute* ('{' inputString=EString '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Tag}
		// tagName=HTMLTag (class+=Class)* id=ID0? attribute+=Attribute* ('{' inputString=EString '}')?
		public Group getGroup() { return cGroup; }
		
		//{Tag}
		public Action getTagAction_0() { return cTagAction_0; }
		
		//tagName=HTMLTag
		public Assignment getTagNameAssignment_1() { return cTagNameAssignment_1; }
		
		//HTMLTag
		public RuleCall getTagNameHTMLTagEnumRuleCall_1_0() { return cTagNameHTMLTagEnumRuleCall_1_0; }
		
		//(class+=Class)*
		public Assignment getClassAssignment_2() { return cClassAssignment_2; }
		
		//Class
		public RuleCall getClassClassParserRuleCall_2_0() { return cClassClassParserRuleCall_2_0; }
		
		//id=ID0?
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//ID0
		public RuleCall getIdID0ParserRuleCall_3_0() { return cIdID0ParserRuleCall_3_0; }
		
		//attribute+=Attribute*
		public Assignment getAttributeAssignment_4() { return cAttributeAssignment_4; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_4_0() { return cAttributeAttributeParserRuleCall_4_0; }
		
		//('{' inputString=EString '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//inputString=EString
		public Assignment getInputStringAssignment_5_1() { return cInputStringAssignment_5_1; }
		
		//EString
		public RuleCall getInputStringEStringParserRuleCall_5_1_0() { return cInputStringEStringParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.WebMate.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameEStringParserRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		
		//Class returns Class:
		//    {Class}
		//    '.' className=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Class}
		//'.' className=EString
		public Group getGroup() { return cGroup; }
		
		//{Class}
		public Action getClassAction_0() { return cClassAction_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//className=EString
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }
		
		//EString
		public RuleCall getClassNameEStringParserRuleCall_2_0() { return cClassNameEStringParserRuleCall_2_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.WebMate.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttributeNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttributeNameEStringParserRuleCall_1_1_0 = (RuleCall)cAttributeNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cAttributeValueAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cAttributeValueEStringParserRuleCall_1_2_1_0 = (RuleCall)cAttributeValueAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Attribute returns Attribute:
		//    {Attribute}
		//    ('[' attributeName=EString ( '=' attributeValue=EString )? ']');
		@Override public ParserRule getRule() { return rule; }
		
		//{Attribute}
		//('[' attributeName=EString ( '=' attributeValue=EString )? ']')
		public Group getGroup() { return cGroup; }
		
		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }
		
		//('[' attributeName=EString ( '=' attributeValue=EString )? ']')
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//attributeName=EString
		public Assignment getAttributeNameAssignment_1_1() { return cAttributeNameAssignment_1_1; }
		
		//EString
		public RuleCall getAttributeNameEStringParserRuleCall_1_1_0() { return cAttributeNameEStringParserRuleCall_1_1_0; }
		
		//( '=' attributeValue=EString )?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2_0() { return cEqualsSignKeyword_1_2_0; }
		
		//attributeValue=EString
		public Assignment getAttributeValueAssignment_1_2_1() { return cAttributeValueAssignment_1_2_1; }
		
		//EString
		public RuleCall getAttributeValueEStringParserRuleCall_1_2_1_0() { return cAttributeValueEStringParserRuleCall_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.WebMate.Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAbbreviationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAbbreviationAbbreviationParserRuleCall_2_0 = (RuleCall)cAbbreviationAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Group returns Group:
		//    {Group}
		//    '(' (abbreviation+=Abbreviation)+ ')' ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Group}
		//'(' (abbreviation+=Abbreviation)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{Group}
		public Action getGroupAction_0() { return cGroupAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(abbreviation+=Abbreviation)+
		public Assignment getAbbreviationAssignment_2() { return cAbbreviationAssignment_2; }
		
		//Abbreviation
		public RuleCall getAbbreviationAbbreviationParserRuleCall_2_0() { return cAbbreviationAbbreviationParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.WebMate.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.WebMate.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class HTMLTagElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.WebMate.HTMLTag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDivDivKeyword_0_0 = (Keyword)cDivEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cH1EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cH1H1Keyword_1_0 = (Keyword)cH1EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPPKeyword_2_0 = (Keyword)cPEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cUlEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cUlUlKeyword_3_0 = (Keyword)cUlEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLiEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLiLiKeyword_4_0 = (Keyword)cLiEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cAEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cAAKeyword_5_0 = (Keyword)cAEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cImgEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cImgImgKeyword_6_0 = (Keyword)cImgEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cFormEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cFormFormKeyword_7_0 = (Keyword)cFormEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cInputEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cInputInputKeyword_8_0 = (Keyword)cInputEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cButtonEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cButtonButtonKeyword_9_0 = (Keyword)cButtonEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cOptionEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cOptionOptionKeyword_10_0 = (Keyword)cOptionEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cSelectEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cSelectSelectKeyword_11_0 = (Keyword)cSelectEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum HTMLTag returns HTMLTag:
		//                div = 'div' | h1 = 'h1' | p = 'p' | ul = 'ul' | li = 'li' | a = 'a' | img = 'img' | form = 'form' | input = 'input' | button = 'button' | option = 'option' | select = 'select';
		public EnumRule getRule() { return rule; }
		
		//div = 'div' | h1 = 'h1' | p = 'p' | ul = 'ul' | li = 'li' | a = 'a' | img = 'img' | form = 'form' | input = 'input' | button = 'button' | option = 'option' | select = 'select'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//div = 'div'
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_0() { return cDivEnumLiteralDeclaration_0; }
		
		//'div'
		public Keyword getDivDivKeyword_0_0() { return cDivDivKeyword_0_0; }
		
		//h1 = 'h1'
		public EnumLiteralDeclaration getH1EnumLiteralDeclaration_1() { return cH1EnumLiteralDeclaration_1; }
		
		//'h1'
		public Keyword getH1H1Keyword_1_0() { return cH1H1Keyword_1_0; }
		
		//p = 'p'
		public EnumLiteralDeclaration getPEnumLiteralDeclaration_2() { return cPEnumLiteralDeclaration_2; }
		
		//'p'
		public Keyword getPPKeyword_2_0() { return cPPKeyword_2_0; }
		
		//ul = 'ul'
		public EnumLiteralDeclaration getUlEnumLiteralDeclaration_3() { return cUlEnumLiteralDeclaration_3; }
		
		//'ul'
		public Keyword getUlUlKeyword_3_0() { return cUlUlKeyword_3_0; }
		
		//li = 'li'
		public EnumLiteralDeclaration getLiEnumLiteralDeclaration_4() { return cLiEnumLiteralDeclaration_4; }
		
		//'li'
		public Keyword getLiLiKeyword_4_0() { return cLiLiKeyword_4_0; }
		
		//a = 'a'
		public EnumLiteralDeclaration getAEnumLiteralDeclaration_5() { return cAEnumLiteralDeclaration_5; }
		
		//'a'
		public Keyword getAAKeyword_5_0() { return cAAKeyword_5_0; }
		
		//img = 'img'
		public EnumLiteralDeclaration getImgEnumLiteralDeclaration_6() { return cImgEnumLiteralDeclaration_6; }
		
		//'img'
		public Keyword getImgImgKeyword_6_0() { return cImgImgKeyword_6_0; }
		
		//form = 'form'
		public EnumLiteralDeclaration getFormEnumLiteralDeclaration_7() { return cFormEnumLiteralDeclaration_7; }
		
		//'form'
		public Keyword getFormFormKeyword_7_0() { return cFormFormKeyword_7_0; }
		
		//input = 'input'
		public EnumLiteralDeclaration getInputEnumLiteralDeclaration_8() { return cInputEnumLiteralDeclaration_8; }
		
		//'input'
		public Keyword getInputInputKeyword_8_0() { return cInputInputKeyword_8_0; }
		
		//button = 'button'
		public EnumLiteralDeclaration getButtonEnumLiteralDeclaration_9() { return cButtonEnumLiteralDeclaration_9; }
		
		//'button'
		public Keyword getButtonButtonKeyword_9_0() { return cButtonButtonKeyword_9_0; }
		
		//option = 'option'
		public EnumLiteralDeclaration getOptionEnumLiteralDeclaration_10() { return cOptionEnumLiteralDeclaration_10; }
		
		//'option'
		public Keyword getOptionOptionKeyword_10_0() { return cOptionOptionKeyword_10_0; }
		
		//select = 'select'
		public EnumLiteralDeclaration getSelectEnumLiteralDeclaration_11() { return cSelectEnumLiteralDeclaration_11; }
		
		//'select'
		public Keyword getSelectSelectKeyword_11_0() { return cSelectSelectKeyword_11_0; }
	}
	public class SYMElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.WebMate.SYM");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMULTIPLYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMULTIPLYAsteriskKeyword_1_0 = (Keyword)cMULTIPLYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATERGreaterThanSignKeyword_2_0 = (Keyword)cGREATEREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SYM returns SYM:
		//    PLUS = '+' | MULTIPLY = '*' | GREATER = '>'
		//;
		public EnumRule getRule() { return rule; }
		
		//PLUS = '+' | MULTIPLY = '*' | GREATER = '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS = '+'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//MULTIPLY = '*'
		public EnumLiteralDeclaration getMULTIPLYEnumLiteralDeclaration_1() { return cMULTIPLYEnumLiteralDeclaration_1; }
		
		//'*'
		public Keyword getMULTIPLYAsteriskKeyword_1_0() { return cMULTIPLYAsteriskKeyword_1_0; }
		
		//GREATER = '>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_2() { return cGREATEREnumLiteralDeclaration_2; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_2_0() { return cGREATERGreaterThanSignKeyword_2_0; }
	}
	
	private final HTMLElements pHTML;
	private final AbbreviationElements pAbbreviation;
	private final ID0Elements pID0;
	private final SymbolElements pSymbol;
	private final TagElements pTag;
	private final ClassElements pClass;
	private final AttributeElements pAttribute;
	private final GroupElements pGroup;
	private final EStringElements pEString;
	private final HTMLTagElements eHTMLTag;
	private final SYMElements eSYM;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WebMateGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pHTML = new HTMLElements();
		this.pAbbreviation = new AbbreviationElements();
		this.pID0 = new ID0Elements();
		this.pSymbol = new SymbolElements();
		this.pTag = new TagElements();
		this.pClass = new ClassElements();
		this.pAttribute = new AttributeElements();
		this.pGroup = new GroupElements();
		this.pEString = new EStringElements();
		this.eHTMLTag = new HTMLTagElements();
		this.eSYM = new SYMElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.WebMate.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.WebMate.STRING");
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl1.WebMate".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//HTML returns HTML:
	//    {HTML}
	//    (abbreviation+=Abbreviation)+;
	public HTMLElements getHTMLAccess() {
		return pHTML;
	}
	
	public ParserRule getHTMLRule() {
		return getHTMLAccess().getRule();
	}
	
	//Abbreviation returns Abbreviation:
	//    {Abbreviation}
	//    '{'
	//    ((abbreviation+=[Abbreviation|EString])* | (tags+=Tag)+
	//    ((ids+=ID0)*
	//    (symbols+=Symbol)*
	//    (classes+=Class)*
	//    (attributes+=Attribute)*
	//    (group+=Group)* ))
	//    '}'
	//    ;
	public AbbreviationElements getAbbreviationAccess() {
		return pAbbreviation;
	}
	
	public ParserRule getAbbreviationRule() {
		return getAbbreviationAccess().getRule();
	}
	
	//ID0 returns ID:
	//    {ID}
	//    ('#' idName=EString) ;
	public ID0Elements getID0Access() {
		return pID0;
	}
	
	public ParserRule getID0Rule() {
		return getID0Access().getRule();
	}
	
	//Symbol returns Symbol:
	//    {Symbol}
	//    (sym=SYM count=EInt) | (sym=SYM tag=Tag);
	public SymbolElements getSymbolAccess() {
		return pSymbol;
	}
	
	public ParserRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}
	
	//Tag returns Tag:
	//    {Tag}
	//     tagName=HTMLTag (class+=Class)* id=ID0? attribute+=Attribute* ('{' inputString=EString '}')?;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//Class returns Class:
	//    {Class}
	//    '.' className=EString;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Attribute returns Attribute:
	//    {Attribute}
	//    ('[' attributeName=EString ( '=' attributeValue=EString )? ']');
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Group returns Group:
	//    {Group}
	//    '(' (abbreviation+=Abbreviation)+ ')' ;
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum HTMLTag returns HTMLTag:
	//                div = 'div' | h1 = 'h1' | p = 'p' | ul = 'ul' | li = 'li' | a = 'a' | img = 'img' | form = 'form' | input = 'input' | button = 'button' | option = 'option' | select = 'select';
	public HTMLTagElements getHTMLTagAccess() {
		return eHTMLTag;
	}
	
	public EnumRule getHTMLTagRule() {
		return getHTMLTagAccess().getRule();
	}
	
	//enum SYM returns SYM:
	//    PLUS = '+' | MULTIPLY = '*' | GREATER = '>'
	//;
	public SYMElements getSYMAccess() {
		return eSYM;
	}
	
	public EnumRule getSYMRule() {
		return getSYMAccess().getRule();
	}
	
	//@Override
	//terminal INT returns ecore::EInt:('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//@Override
	//terminal STRING:('a'..'z'|'A'..'Z'|'_'|' ') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
