/*
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalWebMateParser;
import org.xtext.example.mydsl.services.WebMateGrammarAccess;

public class WebMateParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(WebMateGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, WebMateGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEmmetAccess().getGroup(), "rule__Emmet__Group__0");
			builder.put(grammarAccess.getEmmetAccess().getGroup_5(), "rule__Emmet__Group_5__0");
			builder.put(grammarAccess.getAbbreviationAccess().getGroup(), "rule__Abbreviation__Group__0");
			builder.put(grammarAccess.getAbbreviationAccess().getGroup_3(), "rule__Abbreviation__Group_3__0");
			builder.put(grammarAccess.getAbbreviationAccess().getGroup_4(), "rule__Abbreviation__Group_4__0");
			builder.put(grammarAccess.getAbbreviationAccess().getGroup_4_3(), "rule__Abbreviation__Group_4_3__0");
			builder.put(grammarAccess.getAbbreviationAccess().getGroup_5(), "rule__Abbreviation__Group_5__0");
			builder.put(grammarAccess.getPrefixAccess().getGroup(), "rule__Prefix__Group__0");
			builder.put(grammarAccess.getPrefixAccess().getGroup_3(), "rule__Prefix__Group_3__0");
			builder.put(grammarAccess.getPrefixAccess().getGroup_4(), "rule__Prefix__Group_4__0");
			builder.put(grammarAccess.getPrefixAccess().getGroup_5(), "rule__Prefix__Group_5__0");
			builder.put(grammarAccess.getPrefixAccess().getGroup_6(), "rule__Prefix__Group_6__0");
			builder.put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
			builder.put(grammarAccess.getElementAccess().getGroup_3(), "rule__Element__Group_3__0");
			builder.put(grammarAccess.getElementAccess().getGroup_4(), "rule__Element__Group_4__0");
			builder.put(grammarAccess.getElementAccess().getGroup_5(), "rule__Element__Group_5__0");
			builder.put(grammarAccess.getElementAccess().getGroup_6(), "rule__Element__Group_6__0");
			builder.put(grammarAccess.getElementAccess().getGroup_7(), "rule__Element__Group_7__0");
			builder.put(grammarAccess.getElementAccess().getGroup_7_3(), "rule__Element__Group_7_3__0");
			builder.put(grammarAccess.getSuffixAccess().getGroup(), "rule__Suffix__Group__0");
			builder.put(grammarAccess.getSuffixAccess().getGroup_3(), "rule__Suffix__Group_3__0");
			builder.put(grammarAccess.getSuffixAccess().getGroup_4(), "rule__Suffix__Group_4__0");
			builder.put(grammarAccess.getSuffixAccess().getGroup_5(), "rule__Suffix__Group_5__0");
			builder.put(grammarAccess.getSuffixAccess().getGroup_6(), "rule__Suffix__Group_6__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getTagAccess().getGroup(), "rule__Tag__Group__0");
			builder.put(grammarAccess.getTagAccess().getGroup_3(), "rule__Tag__Group_3__0");
			builder.put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
			builder.put(grammarAccess.getClassAccess().getGroup_3(), "rule__Class__Group_3__0");
			builder.put(grammarAccess.getID0Access().getGroup(), "rule__ID0__Group__0");
			builder.put(grammarAccess.getID0Access().getGroup_3(), "rule__ID0__Group_3__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_3(), "rule__Attribute__Group_3__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_4(), "rule__Attribute__Group_4__0");
			builder.put(grammarAccess.getEmmetAccess().getAbbreviationAssignment_4(), "rule__Emmet__AbbreviationAssignment_4");
			builder.put(grammarAccess.getEmmetAccess().getAbbreviationAssignment_5_1(), "rule__Emmet__AbbreviationAssignment_5_1");
			builder.put(grammarAccess.getAbbreviationAccess().getPrefixAssignment_3_1(), "rule__Abbreviation__PrefixAssignment_3_1");
			builder.put(grammarAccess.getAbbreviationAccess().getElementAssignment_4_2(), "rule__Abbreviation__ElementAssignment_4_2");
			builder.put(grammarAccess.getAbbreviationAccess().getElementAssignment_4_3_1(), "rule__Abbreviation__ElementAssignment_4_3_1");
			builder.put(grammarAccess.getAbbreviationAccess().getSuffixAssignment_5_1(), "rule__Abbreviation__SuffixAssignment_5_1");
			builder.put(grammarAccess.getPrefixAccess().getCountAssignment_3_1(), "rule__Prefix__CountAssignment_3_1");
			builder.put(grammarAccess.getPrefixAccess().getElementNameAssignment_4_1(), "rule__Prefix__ElementNameAssignment_4_1");
			builder.put(grammarAccess.getPrefixAccess().getElementClassAssignment_5_1(), "rule__Prefix__ElementClassAssignment_5_1");
			builder.put(grammarAccess.getPrefixAccess().getElementIDAssignment_6_1(), "rule__Prefix__ElementIDAssignment_6_1");
			builder.put(grammarAccess.getElementAccess().getCountAssignment_3_1(), "rule__Element__CountAssignment_3_1");
			builder.put(grammarAccess.getElementAccess().getElementNameAssignment_4_1(), "rule__Element__ElementNameAssignment_4_1");
			builder.put(grammarAccess.getElementAccess().getElementClassAssignment_5_1(), "rule__Element__ElementClassAssignment_5_1");
			builder.put(grammarAccess.getElementAccess().getElementIDAssignment_6_1(), "rule__Element__ElementIDAssignment_6_1");
			builder.put(grammarAccess.getElementAccess().getAttributesAssignment_7_2(), "rule__Element__AttributesAssignment_7_2");
			builder.put(grammarAccess.getElementAccess().getAttributesAssignment_7_3_1(), "rule__Element__AttributesAssignment_7_3_1");
			builder.put(grammarAccess.getSuffixAccess().getTextAssignment_3_1(), "rule__Suffix__TextAssignment_3_1");
			builder.put(grammarAccess.getSuffixAccess().getElementNameAssignment_4_1(), "rule__Suffix__ElementNameAssignment_4_1");
			builder.put(grammarAccess.getSuffixAccess().getElementClassAssignment_5_1(), "rule__Suffix__ElementClassAssignment_5_1");
			builder.put(grammarAccess.getSuffixAccess().getElementIDAssignment_6_1(), "rule__Suffix__ElementIDAssignment_6_1");
			builder.put(grammarAccess.getTagAccess().getTagNameAssignment_3_1(), "rule__Tag__TagNameAssignment_3_1");
			builder.put(grammarAccess.getClassAccess().getClassNameAssignment_3_1(), "rule__Class__ClassNameAssignment_3_1");
			builder.put(grammarAccess.getID0Access().getIdNameAssignment_3_1(), "rule__ID0__IdNameAssignment_3_1");
			builder.put(grammarAccess.getAttributeAccess().getAttributeNameAssignment_3_1(), "rule__Attribute__AttributeNameAssignment_3_1");
			builder.put(grammarAccess.getAttributeAccess().getAttributeValueAssignment_4_1(), "rule__Attribute__AttributeValueAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private WebMateGrammarAccess grammarAccess;

	@Override
	protected InternalWebMateParser createParser() {
		InternalWebMateParser result = new InternalWebMateParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public WebMateGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(WebMateGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
